name: maselniczka

services:
  client-app:
    build:
      context: ./client-app
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    container_name: client-app
    ports:
      - '${CLIENT_APP_PORT}:3000'
    volumes:
      - ./client-app/src:/app
      - /app/node_modules
      - /app/.next
    env_file:
      - ./client-app/.env
    environment:
      - NODE_ENV=${CLIENT_NODE_ENV}
      - CHOKIDAR_USEPOLLING=true
    networks:
      - client-network
    depends_on:
      - core-api

  core-api:
    build:
      context: ./core-api
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    container_name: core-api
    ports:
      - '${CORE_API_HTTP_PORT}:5042'
      - '${CORE_API_HTTPS_PORT}:7038'
    volumes:
      - ./core-api/src:/app
      - /app/bin
      - /app/obj
    env_file:
      - ./core-api/.env
    environment:
      DOTNET_USE_POLLING_FILE_WATCHER: "1"
      DOTNET_RUNNING_IN_CONTAINER: "true"
      ASPNETCORE_ENVIRONMENT: ${CORE_API_ENV}
    networks:
      - application-network
      - client-network
    depends_on:
      - postgres-db
      - redis
      - rabbitmq

  postgres-db:
    image: postgres
    restart: unless-stopped
    container_name: postgres-db
    ports:
      - '${POSTGRES_DB_PORT}:5432'
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_DB_ROOT_PASSWORD}
    networks:
      - application-network

  mongo-db:
    image: mongo
    restart: unless-stopped
    container_name: mongo-db
    ports:
      - '${MONGO_DB_PORT}:27017'
    volumes:
      - ./data/mongo/data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB_ROOT_PASSWORD}
    networks:
      - application-network

  rabbitmq:
    image: rabbitmq:4.0-management
    restart: unless-stopped
    container_name: rabbitmq
    ports:
      - '${RABBITMQ_MANAGEMENT_PORT}:15672'
      - '${RABBITMQ_AMQP_PORT}:5672'
      - '${RABBITMQ_MQTT_PORT}:1883'
    volumes:
      - ./.docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - application-network

  redis:
    image: redis:7.0
    restart: unless-stopped
    container_name: redis
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - ./data/redis/cache:/data
    environment:
      - REDIS_DB=${REDIS_DB}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_TLS=${REDIS_TLS}
    networks:
      - application-network

  structurizr:
    image: structurizr/lite:latest
    container_name: structurizr
    restart: unless-stopped
    ports:
      - '${STRUCTURIZR_PORT}:8080'
    volumes:
      - ./structurizr:/usr/local/structurizr
    environment:
      STRUCTURIZR_WORKSPACE_PATH: workspace

networks:
  client-network:
    name: client-network
    ipam:
      driver: default
      config:
        - subnet: 172.16.50.0/24

  application-network:
    name: application-network
    ipam:
      driver: default
      config:
        - subnet: 192.168.50.0/24
