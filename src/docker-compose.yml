name: maselniczka

services:
  client-app:
    build:
      context: ./client-app
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    container_name: client-app
    ports:
      - '${CLIENT_APP_PORT}:3000'
    volumes:
      - /app/node_modules
    env_file:
      - ./client-app/.env
    environment:
      - NODE_ENV=${CLIENT_NODE_ENV}
    networks:
      - client-network
    depends_on:
      - core-api
    develop:
      watch:
        - action: sync
          path: ./client-app/src
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./client-app/src/package.json

  core-api:
    build:
      context: ./core-api
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    container_name: core-api
    ports:
      - '${CORE_API_HTTP_PORT}:5042'
      - '${CORE_API_HTTPS_PORT}:7038'
    volumes:
      - ./core-api/src:/app
      - ./data/uploads:/app/Core.Api/wwwroot/uploads
    env_file:
      - ./core-api/.env
    environment:
      DOTNET_USE_POLLING_FILE_WATCHER: "1"
      DOTNET_RUNNING_IN_CONTAINER: "true"
      ASPNETCORE_ENVIRONMENT: ${CORE_API_ENV}
    networks:
      - application-network
      - client-network
    depends_on:
      - restaurant-service
      - postgres-db
      - redis
      - rabbitmq

  restaurant-service:
    build:
      context: ./restaurant-service
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    container_name: restaurant-service
    ports:
      - '${RESTAURANT_SERVICE_PORT}:8090'
    volumes:
      - ./restaurant-service/src:/app
      - ~/.m2:/root/.m2
    env_file:
      - ./restaurant-service/.env
    networks:
      - application-network
    depends_on:
      - mongo-db
      - rabbitmq

  postgres-db:
    image: postgres
    restart: unless-stopped
    container_name: postgres-db
    ports:
      - '${POSTGRES_DB_PORT}:5432'
    volumes:
      - ./data/postgres/data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_DB_ROOT_PASSWORD}
    networks:
      - application-network

  mongo-db:
    image: mongo
    restart: unless-stopped
    container_name: mongo-db
    ports:
      - '${MONGO_DB_PORT}:27017'
    volumes:
      - ./data/mongo/data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB_ROOT_PASSWORD}
    networks:
      - application-network

  rabbitmq:
    image: rabbitmq:4.0-management
    restart: unless-stopped
    container_name: rabbitmq
    ports:
      - '${RABBITMQ_MANAGEMENT_PORT}:15672'
      - '${RABBITMQ_AMQP_PORT}:5672'
      - '${RABBITMQ_MQTT_PORT}:1883'
    volumes:
      - ./.docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - application-network

  structurizr:
    image: structurizr/lite:latest
    container_name: structurizr
    restart: unless-stopped
    ports:
      - '${STRUCTURIZR_PORT}:8080'
    volumes:
      - ./../doc/architecture/diagrams:/usr/local/structurizr
    environment:
      STRUCTURIZR_WORKSPACE_PATH: workspace

networks:
  client-network:
    name: client-network
    ipam:
      driver: default
      config:
        - subnet: 172.16.50.0/24

  application-network:
    name: application-network
    ipam:
      driver: default
      config:
        - subnet: 192.168.50.0/24
